

// RESPOND
// mixin for adding media queries
// note that this will only be applied if the break points used
// are in the $breakpoints array (see helpers/_variables.scss)

// Example usage:

// // min 400
// @include respond(400) {
//   your: styles;
// }

// // between 480 and 800
// @include respond(480, 800) {
//   your: styles;
// }

@mixin respond($min-width, $max-width: false) {
  $min: false;
  $max: false;

  @each $breakpoint in $breakpoints {
    @if $min-width == $breakpoint { $min: $breakpoint };
    @if $max-width == $breakpoint { $max: $breakpoint };
  }

  @if $max {
    $max: $max - 1;
  }

  @if ($min and $max) and ($min > $max) {
    @warn "$min-width value is greater than $max-width value.";
  } @else if ($min == 0 and $max) {
    @media (max-width: em($max)) { @content; }
  } @else if ($min and $max) {
    @media (min-width: em($min)) and (max-width: em($max)) { @content; }
  } @else if $min {
    @media (min-width: em($min)) { @content; }
  }
}


// REM
// bourbon rem function does not support multiple properties
// this one does

// example usage:
// @include rem(margin, 20, 0);

@mixin rem($property, $values...) {
  $max: length($values);
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-units(nth($values, $i));
    $remValues: #{$remValues + $value / $body-font-size}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $remValues;
}


// BORDER RADIUS
// bourbon does not include a mixin for this
// but we do require the webkit prefix (apr 2015)

// example usages:
// @include border-radius(4px);
// @include border-radius(0 0 0 0 / 10px 20px 30px 40px);

@mixin border-radius( $args:0 ) {
  -webkit-border-radius: $args;
          border-radius: $args;
}


// FONT-SIZE
// mixin for setting the font-size and line-height of elements
// note: if you are scaling up
//       the font sizes are fluid based on the window width

// example usage:
// .foo {
//   @include font-size( xl );
// }
// .bar {
//   @include font-size( s );
// }

@mixin font-size( $size ) {
  $font-sizes:
    ("xxxl", "fluid",  2.157, 1.1)
    ("xxl",  "fluid",  1.369, 1.2)
    ("xl",   "fluid",   .777, 1.3)
    ("l",    "fluid",   .333, 1.4)
    ("m",    "fixed", 14,     1.5)
    ("s",    "fixed", 12,     1.5)
    ("xs",   "fixed", 10,     1.5);

  @each $font-size, $type, $multiplier, $line-height in $font-sizes {
    @if $size == $font-size {
      @if $type == "fluid" {
        font-size: calc(#{$body-font-size}px + #{$multiplier}vw);
        /* #{rem($body-font-size)} */
      } @else {
        font-size: rem($multiplier);
      }
      line-height: #{$line-height};
    }
  }
}



// HIDDEN SCROLLBARS
// - desktop users only
// shows no scrollbars by default
// scrollbars appear on hover over element

// accepts arguments:
// "x" for hidden horizontal scrollbars
// "y" for hidden vertical scrollbars
// if no argument is passed it will be applied to both directions

// example usage:
// .overflows-vertical {
//   @include hidden-scrollbars(y);
// }
// .overflows-everywhere {
//   @include hidden-scrollbars();
// }

@mixin hidden-scrollbar($dir: null) {

  @if $dir == "x" or $dir == "y" {
    $dir: -#{$dir};
  }

  overflow#{$dir}: hidden;
  &:hover {
    overflow#{$dir}: auto;
  }
}



// AURA
// adds an animated box-shadow to a clicked element
// note: will override the following properties:
// box-shadow
// transition

// accepts an optional color
// default is the default button color

// example usage:
// .my-button {
//   @include button();
//   @include aura()
// }

// dependencies:
//   $bounce variable

@mixin aura($color: $color-grey) {
  box-shadow: 0 0 0 0 rgba($color, .2);
  will-change: box-shadow;
  @include transition(box-shadow .2s $bounce);

  &:active {
    box-shadow: 0 0 0 10px rgba($color, .2);
  }
}



// BUTTON
// adds button appearance and behaviour to an element
// note that buttons are not styled by default

// accepts comma-separated arguments:
// "primary" to create a more evident button (use sparingly)
// "secondary" to create a text link style button
// "fullwidth" to create a button that horizontally spans the entire parent element

// example usage:
// .my-button {
//   @include button(primary, fullwidth);
// }

// dependencies:
//   aura mixin

@mixin button($style...) {
  // settings for default buttons
  $display:    inline-block;
  $width:      auto;
  $color-bg:   $color-grey;
  $color-text: $color-white;
  $fullwidth:  false;

  // update variables
  // if any of the allowed styles have been passed
  @if length($style) > 0 {
    @for $i from 1 through length($style) {
      @if #{nth($style, $i)} == "primary" {
        $color-bg: $color-grey-darker;
      }
      @if #{nth($style, $i)} == "secondary" {
        $color-bg:   transparent;
        $color-text: $color-grey-darker;
      }
      @if #{nth($style, $i)} == "fullwidth" {
        $display:   block;
        $width:     100;
        $fullwidth: true;
      }
    }
  }

  // styling
  display: $display;
  @include appearance(none);
  overflow: visible;

  position: relative;

  @include rem(margin, 5);
  @include rem(padding, 0 ,10);

  border: none;
  @include border-radius(rem(4));
  background-color: $color-bg;

  @include font-size(s);
  color: $color-text;
  line-height: rem(32);
  white-space: nowrap;
  text-transform: uppercase;

  cursor: pointer;
  -ms-touch-action: manipulation; /* IE10  */
      touch-action: manipulation; /* IE11+ */

  @include aura($color-bg);

  &:focus {
    outline: 0;
  }

  .svg-icon {
    color: rgba($color-text, .8);
    &:first-child {
      margin-right: .5em;
      @if $fullwidth {
        float: left;
      }
    }
    &:last-child {
      margin-left: .5em;
      @if $fullwidth {
        float: right;
      }
    }
  }
}
